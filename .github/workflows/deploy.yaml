run-name: Deploy by @${{ github.actor }}

on:
  push:

permissions:
  packages: write
  contents: read
  attestations: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}

jobs:
  build:
    name: Build sources
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: paulhatch/semantic-version@v5.4.0
        name: Get Semantic Version
        id: semVer
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "!"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "feat"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
          bump_each_commit_patch_pattern: ""
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: true
          # If enabled, diagnostic information will be added to the action output.
          debug: false
          # If true, the branch will be used to select the maximum version.
          version_from_branch: false

      - name: Build and push Frontend
        uses: docker/build-push-action@v6
        with:
          context: Frontend
          file: Frontend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/todo-frontend:${{ steps.semVer.outputs.version}},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/todo-frontend:latest

      - name: Build and push Backend
        uses: docker/build-push-action@v6
        with:
          context: Backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/todo-backend:${{ steps.semVer.outputs.version}},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/todo-backend:latest
